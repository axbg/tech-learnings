To Learn

    - Saving activity state
        - to preserve the state of an activity you have to override the "OnSaveInstanceState" method
        - the data is saved inside the outState bundle
        - you can attach something to the bundle using bundle.put methods

        - saved state can be accesesd inside the "OnCreate" method through the savedInstanceState param
        - to get something from the bundle use savedInstanceState.get methods 


    - Intents
        - data can be passed form an activity to another using Intents
        - a class transfered through an intent should implement the Serializable interface


    - Working with dates
        - in the Constants interface create two resources
                String DateFormat = "dd-mm-yyyy";
                SimpleDateFormat dateFormatter = new SimpleDateFormat(DateFormat);
        
        - When you receive a date from a layout input, convert it to date
                Date date = dateFormatter(input);
        - If the value is invalid, an error will be thrown
        
        - if you want to convert a Date back to String, use the same method
                String date = dateFormatter(date);


    - Menu
        - create a new directory in the res directory and name it "menu"
        - create a new "Menu Resource File" using the interface
        - create as many MenuItems as you need

        - back in the Activity where you want to implement the menu
        - override the "OnCreateOptionsMenu" method and inflate the menu
                MenuInflater inflater = getMenuInflater();
                inflater.inflate(R.menu.your_menu_layout);

        - if you want to hide an element use 
                menu.findItem(R.id.your_menu_item).setVisible(false);

        - to set specific behaviour for clicking on a menu item override the "onOptionsItemsSelected"
        - use a switch to treat all the cases
                switch(item.getItemId()){
                    case R.id.your_item_id:
                        doSomething();
                        return 1;
                }        


    - Array Adapters
        - it can be used with a Spinner(R.layout.) or a ListView(R.layout.)
        - you have to override the toString method in the target class
                ArrayAdapter adapter = new ArrayAdapter(getApplicationContext, R.layout.resource, yourCollectionWithObjects);
                spinner.setAdapter(adapter);
        
        - to update the adapters data source use
                adapter.notifyDataSetChange();

        - to use an adapter for array declared in the strings.xml file use
                ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getApplicationContext(), 
                                                                        R.array.your_array, R.layout.support_simple_spinner_dropdown_item);

        - to define an array in the strings.xml file use
                <string-array name="array-name">
                        <item>Elem1</item>
                        <item>Elem2</item>
                </string-array>


    - Custom Adapters
        - particular type of adapters which supports complex behaviour
        - they should be implemented starting from a base class
        - example of base classes: SpinnerAdapter, ListAdapter, ArrayAdapter

        - Custom Array Adapter example
                - create a new linear layout to structure the way your List View should look
                - create a new layout in which you place the targeted List View

                - create a new class which extends the ArrayAdapter<> base class
                        - class ExpenseAdapter extends ArrayAdapter<Expense>
                
                - override the constructor with 3 parameters (context, resource, list of objects) then add LayoutInflater inflater as 4th parameter

                - declare a class variable for each parameter of the constructor and intialize them inside the constructor with 
                        the received parameters

                - override the "getView" method
                - inside the method, create a View object which will be used to display a row
                        View row = inflater.inflate(resource, parent, false);

                - inside this method populate all the textViews present in the linear layout structure
                - return the row

                - use it in the targeted activity as follows
                        CustomAdapter adapter = new CustomAdapter(getApplicationContext(), R.layout.your_linear_layout_template, objects, getLayoutInflater());


    - AsyncTask
        - the AsyncTask class allows the application to execute tasks asynchronously and return the result in the UI thread
        - implementation

                - create a new class and extend the AsyncTask class
                        - class CustomAsync extends AsyncTask<input_parameters_type, progress_parameters_type, output_parameters_type>

                - override the method doInBackground
                        - this is the method that will run in a separate thread

                - to use this class use and override the "onPostExecute" inside its definition
                        CustomAsync custom = new CustomClass(){
                                protected void onPostExecute(String s) {
                                        Toast.makeText(getApplicationContext(), s, Toast.LENGTH_SHORT).show();
                                } 
                        }

                - run the async operation 
                        custom.execute(params);

                - the "onPostExecute" method will be called after the async execution has finished


     - HTTP Manager
        - HTTP operations are run using an AsyncTask implementation
        - to interact with a REST web service you need to use 5 different entities
                - URL url - will open the HTTP connection
                - HttpURLConnection connection - will handle the HTTP connection
                - InputStream iStream - will receive an input stream from the network
                - InputStreamReader iReader - will parse the received stream
                - BufferedReader bReader - will parse smaller chunks from the InputStreamReader data
                - StringBuilder builder - will concatenate the HTTP response received through input stream

        - they are declared in the AsyncTask implementation as attributes

        - example of implementation
                try {
                        url = new URL(strings[0]);
                        connection = (HttpURLConnection) url.openConnection();
                        inputStream = connection.getInputStream();
                        inputStreamReader = new InputStreamReader(inputStream);
                        bufferedReader = new BufferedReader(inputStreamReader);

                        String line;

                        while((line = bufferedReader.readLine()) != null){
                                builder.append(line);
                        }

                } catch (MalformedURLException e) {
                        e.printStackTrace();
                } catch (IOException e){
                        e.printStackTrace();
                } finally{
                        try {
                                bufferedReader.close();
                                inputStreamReader.close();
                                inputStream.close();
                                connection.connect();
                        } catch (IOException e) {
                                e.printStackTrace();
                        }
                }
    

    - Parse JSON
        - fortunately, a helper class for parsing JSON is implemented by default in Java
        - there are two entities used
                - JSONObject obj
                - JSONArray arr

        - the methods used return a JSONObject or a JSONArray
                - obj.getJSONObject("key");
                - obj.getJSONArray("key");


    - Databases
        - for local databases, Android uses SQLite
        - the easiest way to interact with a database is through the 
        - 

    - Graphics

    - Requestion permissions

    - Shared preferences

